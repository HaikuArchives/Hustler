// ***************************************************************************
// Implementation System Includes
// ***************************************************************************

// ***************************************************************************
// Implementation Project Includes
// ***************************************************************************

#include "DummyPlayer.h"
#include "HustlerMain.h"

// ***************************************************************************
// Implementation Constant Definitions
// ***************************************************************************

// ***************************************************************************
// Implementation Type Definitions
// ***************************************************************************

// ***************************************************************************
// Implementation Variable Definitions
// ***************************************************************************

// ***************************************************************************
// Implementation Function Declarations
// ***************************************************************************

// ***************************************************************************
// Global Variable Definitions
// ***************************************************************************

// ***************************************************************************
// PUBLIC Member Function Definitions
// ***************************************************************************

// ===========================================================================
// Constructor
// ===========================================================================

DummyPlayer::DummyPlayer(void)
	: HustlerPlayer()
{
	BBG_WRITE(("[DummyPlayer::DummyPlayer] Constructed."));
}

// ===========================================================================
// Destructor
// ===========================================================================

DummyPlayer::~DummyPlayer(void)
{
	BBG_WRITE(("[DummyPlayer::~DummyPlayer] Destructed."));
}

// ===========================================================================
// Play
// ===========================================================================

void
DummyPlayer::Play(void)
{
	BBG_ENTER("[DummyPlayer::Play]");
}

// ===========================================================================
// Resume
// ===========================================================================

void 
DummyPlayer::Resume(void)
{
	BBG_ENTER("[DummyPlayer::Resume]");
}

// ===========================================================================
// Pause
// ===========================================================================

void
DummyPlayer::Pause(void)
{
	BBG_ENTER("[DummyPlayer::Pause]");
}

// ===========================================================================
// Stop
// ===========================================================================

void
DummyPlayer::Stop(void)
{
	BBG_ENTER("[DummyPlayer::Stop]");
}

// ===========================================================================
// Previous
// ===========================================================================
 
void 
DummyPlayer::Previous(void)
{
	BBG_ENTER("[DummyPlayer::Previous]");
}
 
// ===========================================================================
// Next
// ===========================================================================

void
DummyPlayer::Next(void)
{
	BBG_ENTER("[DummyPlayer::Next]");
}

// ===========================================================================
// GoTo
// ===========================================================================

void 
DummyPlayer::GoTo(int32 track)
{
	BBG_ENTER("[DummyPlayer::GoTo]");
}

// ===========================================================================
// SetVolume
// ===========================================================================

void 
DummyPlayer::SetVolume(float volume)
{
	BBG_ENTER("[DummyPlayer::SetVolume]");
}

// ===========================================================================
// GetVolume
// ===========================================================================

float 
DummyPlayer::GetVolume(void)
{
	BBG_ENTER("[DummyPlayer::GetVolume]");
	return 0.0;
}

// ===========================================================================
// SetPanning
// ===========================================================================

void 
DummyPlayer::SetPanning(float panning)
{
	BBG_ENTER("[DummyPlayer::SetPanning]");
}

// ===========================================================================
// GetPanning
// ===========================================================================

float  
DummyPlayer::GetPanning(void)
{
	BBG_ENTER("[DummyPlayer::GetPanning]");
	return 0.0;
}

// ===========================================================================
// Eject
// ===========================================================================

void
DummyPlayer::Eject(void)
{
	BBG_ENTER("[DummyPlayer::Eject]");
}

// ===========================================================================
// GetState
// ===========================================================================
  
DummyPlayer::State
DummyPlayer::GetState(void)
{
	return STATE_NO_TRACKS;
}

// ===========================================================================
// GetCurrentTrack
// ===========================================================================

int32
DummyPlayer::GetCurrentTrack(void)
{
	return -1;
}

// ===========================================================================
// GetNumberOfTracks
// ===========================================================================

int32 
DummyPlayer::GetNumberOfTracks(void)
{
	return 0;
}

// ===========================================================================
// GetPlaylist
// ===========================================================================

BList*
DummyPlayer::GetPlaylist(void)
{
	return 0;
}

// ===========================================================================
// CanPlay
// ===========================================================================

bool
DummyPlayer::CanPlay(void)
{
	return false;
}

// ===========================================================================
// CanResume
// ===========================================================================

bool
DummyPlayer::CanResume(void)
{
	return false;
}

// ===========================================================================
// CanPause
// ===========================================================================

bool
DummyPlayer::CanPause(void)
{
	return false;
}

// ===========================================================================
// CanStop
// ===========================================================================

bool
DummyPlayer::CanStop(void)
{
	return false;
}

// ===========================================================================
// CanPrevious
// ===========================================================================

bool
DummyPlayer::CanPrevious(void)
{
	return false;
}

// ===========================================================================
// CanNext
// ===========================================================================

bool
DummyPlayer::CanNext(void)
{
	return false;
}

// ===========================================================================
// CanGoTo
// ===========================================================================

bool
DummyPlayer::CanGoTo(void)
{
	return false;
}

// ===========================================================================
// CanVolume
// ===========================================================================

bool
DummyPlayer::CanVolume(void)
{
	return false;
}

// ===========================================================================
// CanPan
// ===========================================================================

bool
DummyPlayer::CanPan(void)
{
	return false;
}

// ===========================================================================
// CanEject
// ===========================================================================

bool
DummyPlayer::CanEject(void)
{
	return false;
}

// ***************************************************************************
// PROTECTED Member Function Definitions
// ***************************************************************************

// ***************************************************************************
// PRIVATE Member Function Definitions
// ***************************************************************************

// ***************************************************************************
// Helper Function Definitions
// ***************************************************************************

// ***************************************************************************
// Global Function Definitions
// ***************************************************************************

// ***************************************************************************
// Implementation Function Definitions
// ***************************************************************************
